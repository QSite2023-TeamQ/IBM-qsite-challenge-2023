import classiq
classiq.authenticate()
from classiq import (
    Model,
    RegisterUserInput,
    construct_grover_model,
    execute,
    set_constraints,
    show,
    synthesize,
)
from classiq.builtin_functions import ArithmeticOracle, GroverOperator, StatePreparation
import numpy as np
import scipy
from classiq import Constraints, Model, Preferences
from classiq.interface.generator.model.preferences.preferences import CustomHardwareSettings

import classiq
classiq.authenticate()
from classiq import (
    Model,
    RegisterUserInput,
    construct_grover_model,
    execute,
    set_constraints,
    show,
    synthesize,
)
from classiq.builtin_functions import ArithmeticOracle, GroverOperator, StatePreparation
import numpy as np
import scipy
from classiq import Constraints, Model, Preferences
from classiq.interface.generator.model.preferences.preferences import CustomHardwareSettings

# to find the nearby item of the matrix relationship as an expression!
EXPRESSION = "(x0 != x1) and" + \
             "(x1 != x2) and" + \
             "(x3 != x4) and" + \
             "(x4 != x5) and" + \
             "(x6 != x7) and" + \
             "(x7 != x8) and" + \
             "(x9 != x10) and" + \
             "(x10 != x11) and" + \
             "(x0 != x2) and" + \
             "(x3 != x5) and" + \
             "(x6 != x8) and" + \
             "(x9 != x11) and" + \
             "(x3 != x6) and" + \
             "(x6 != x9) and" + \
             "(x0 != x4) and" + \
             "(x4 != x10) and" + \
             "(x1 != x7) and" + \
             "(x7 != x11) and" + \
             "(x2 != x5) and" + \
             "(x5 != x8) and" + \
             "(x3 != x9) and" + \
             "(x0 != x10) and" + \
             "(x1 != x11) and" + \
             "(x2 != x8) and" + \
             "(x0 + x1 + x2 + 2 == 10) and" + \
             "(x3 + x4 + 3 + x5 == 10) and" + \
             "(x6 + 4 + x7 + x8 == 10) and" + \
             "(x9 + x10 + x11 + 1 == 10) and" + \
             "(2 + x3 +x6 + x9 == 10) and" + \
             "(x0 + x4 + 4 + x10 == 10) and" + \
             "(x1 + 3 + x7 + x11 == 10) and" + \
             "(x2 + x5 + x8 + 1 == 10) and" + \
             "(2 + x0 + x3 + x4 == 10) and" + \
             "(x1 + x2 + x5 + 3 == 10) and" + \
             "(x6 + x9 + x10 + 4 == 10) and" + \
             "(x7 + x8 + x11 + 1 == 10)"

# create the oracle
oracle_params = ArithmeticOracle(
    expression=EXPRESSION,
# this is the missing item of the overall puzzels    
    definitions=dict(
        x0=RegisterUserInput(size=1),
        x1=RegisterUserInput(size=1),
        x2=RegisterUserInput(size=1),
        x3=RegisterUserInput(size=1),
        x4=RegisterUserInput(size=1),
        x5=RegisterUserInput(size=1),
        x6=RegisterUserInput(size=1),
        x7=RegisterUserInput(size=1),
        x8=RegisterUserInput(size=1),
        x9=RegisterUserInput(size=1),
        x10=RegisterUserInput(size=1),
        x11=RegisterUserInput(size=1),
    ),
    uncomputation_method="optimized",
)

model = Model()
model.ArithmeticOracle(params=oracle_params)
constraints = Constraints(max_width=24)
serialized_model = set_constraints(model.get_model(), constraints)
circuit = synthesize(serialized_model)
show(circuit)